dyn.unload('mvn_tmb')
dyn.unload('mvnd_tmb')
dyn.unload('mvnd_tmb')
traceback()
traceback()
k
closeAllConnections()
k
str(adapt.nuts)
perf.list
time.tmb
perf.list
Q
C
C
C
c
c
c
c
c
inits
str(inits)
obj.tmb$fn()
traceback()
closeAllConnections()
c
closeAllConnections()
divergent
H
n
log(u)
log(u) <= H
log(u) < delta.max +H
Q
traceback()
traceback()
par.names
names(obj$par)
Q
c
c
c
c
.boundp(5, a=-3, b=1, case=0)
.boundp(5, a=-3, b=1, case=1)
.boundp(5, a=-3, b=1, case=2)
.boundp(5, a=-3, b=1, case=3)
case
upper
lower
)
x
traceback()
.transform2(c(1,1), a,b, cases)
.transform(c(1,1), a,b, cases)
.transform.grad(c(1,1), a,b, cases)
.transform.grad(c(1,1), a,b, cases)
a
b
.transform.grad(c(1,1), a,b, cases)
.transform.grad2(c(1,1), a,b, cases)
.transform.inv(c(1,1), a,b, cases)
.transform.inv(c(-1,3), a,b, cases)
length(NULL)
.transform.inv(c(1,1), a,b, cases)
.transform.inv(c(1,1), a,b, cases)
.transform.inv(c(1,10), a,b, cases)
.transform.inv(c(-1,10), a,b, cases)
a
b
.transform.inv(c(-3,10), a,b, cases)
str(mcmc.out)
Q
str(mcmc.out)
Q
str(mcmc.out)
Q
mvnd.obj$env$DLL
c
traceback()
i=1
str(temp)
str(temp)
Q
Q
plot(theta.out[,-3])
plot(theta.out[,-3])
Q
str(samplesQ
Q
Q
Q
str(samples)
plot(samples[, 1, -3])
plot(samples[, 1, 1])
Q
plot(samples[, 1, 1])
plot(samples[, 2, 1])
plot(samples[, 3, 1])
Q
plot(samples[, 3, 1])
Q
plot(theta.out[,1])
plot(theta.out[,1])
c
plot(samples[, 3, 1])
plot(samples[, 3, 1])Q
Q
plot(theta.out[,1])
plot(theta.out[,2])
warmup
c
c
c
plot(samples[,1,1])
str(mcmc.out)
Q
plot(samples[,1,1])
plot(mcmc.out[[1]]$par[,1])
bounded
str(mcmc.out[[i]]$par)
str(mcmc.out[[i]]$par)
plot(mcmc.out[[i]]$par)
plot(samples[,1,1])
plot(samples[,1,1])
plot(mcmc.out[[i]]$par[,1])
plot(mcmc.out[[i]]$par[,1])
plot(samples[,1,1])
hist(exp(runif(1e6, -5,5)))
x <- runif(1e6, -5, 5)
hist(exp(x))
hist(exp(x)-x)
2^10
2^8
c
alpha2
nprime
yy$n
xx$n
c
upper
lower
remove.packages("shinystan")
install.packages('shinystan')
devtools::install_github('stan-dev/shinystan')
